$Key = @();
$Value = @();
$dataRow = @();
$Body;
$startDate = Get-Date;

##### Loop through the data File
Function InvokeWebRequest($dataFile) {
    foreach ($row in $dataFile){
        foreach($property in $row.psobject.Properties){
            $Key = ($property | Select-Object -Property name | % {$_.Name})
            $Value = ($property | Select-Object -Property value | % {$_.Value})
            if([string]$Value -as [DateTime]){
                #$Value = Get-Date $Value -Format 'MfM/dd/yyyy'
                $Value = Get-Date $Value -Format 'MM/dd/yyyy'
            }

            $Body += [string]([string]$Key + "=" + [string]$Value + "&")
        }
        $dataRow +=$Body
    }
    $arr = $Body -split '&environment'
    for($i=1; $i -lt $arr.Count; $i++){
        $arr[$i] = "environment" + $arr[$i]
    }
    for($loop=0; $loop -lt $arr.count; $loop++){
        $Response = Invoke-WebRequest -Uri "http://bltmlu1:8080/testbillingui/services" -Method POST -Body $arr[$loop] 
        Write-Output $Response.Content
    }
}

#### This executes the aging tool, I should know when the batch file is done executing.
Function executeAging($date){
    powershell.exe D:\Tools\shelter-batch-tool\shelter-batch-tool-unit.bat $date -Wait -NoNewWindow | Out-Host
}

#### This gets the next file to process
Function getDataFile(){
    return 1
}

# Regression - Say - Day 1 - Purchase - Full Credit Card.xlsx
write-output "`n Regression - Say - Day 1 - Purchase - Full Credit Card.xlsx"
$dataFile = Import-Excel ("D:\RegressionTests_New\Test Data - R12 - UNIT - Say Regression - 2019 08 02-template-for-autogenerated-data\Regression - Say - Day 1 - Purchase - Full Credit Card.xlsx")
InvokeWebRequest($dataFile)
Write-Output "`n Finished Day 1 - Full Credit Card"
Start-Sleep -Seconds 2

# Regression - Say - Day 1 - Purchase - Full EFT.xlsx
write-output "`n Regression - Say - Day 1 - Purchase - Full EFT.xlsx"
$dataFile = Import-Excel ("D:\RegressionTests_New\Test Data - R12 - UNIT - Say Regression - 2019 08 02-template-for-autogenerated-data\Regression - Say - Day 1 - Purchase - Full EFT.xlsx")
InvokeWebRequest($dataFile)
Write-Output "`n Finished Say - Day 1 - Purchase - Full EFT.xlsx"
Start-Sleep -Seconds 2

# Regression - Say - Day 1 - Purchase - Monthly Credit Card.xlsx
write-output "`n Regression - Say - Day 1 - Purchase - Monthly Credit Card.xlsx"
$dataFile = Import-Excel ("D:\RegressionTests_New\Test Data - R12 - UNIT - Say Regression - 2019 08 02-template-for-autogenerated-data\Regression - Say - Day 1 - Purchase - Monthly Credit Card.xlsx")
InvokeWebRequest($dataFile)
Write-Output "`n Finished Say - Day 1 - Purchase - Monthly Credit Card.xlsx"
Start-Sleep -Seconds 2

# Regression - Say - Day 1 - Purchase - Monthly EFT.xlsx
write-output "`n Regression - Say - Day 1 - Purchase - Monthly EFT.xlsx"
$dataFile = Import-Excel ("D:\RegressionTests_New\Test Data - R12 - UNIT - Say Regression - 2019 08 02-template-for-autogenerated-data\Regression - Say - Day 1 - Purchase - Monthly EFT.xlsx")
InvokeWebRequest($dataFile)
Write-Output "`n Finished Say - Day 1 - Purchase - Monthly EFT.xlsx"
Start-Sleep -Seconds 2

# Regression - Say - Day 1 - Add credit cards and bank accts.xlsx
write-output "`n Regression - Say - Day 1 - Add credit cards and bank accts.xlsx"
$dataFile = Import-Excel ("D:\RegressionTests_New\Test Data - R12 - UNIT - Say Regression - 2019 08 02-template-for-autogenerated-data\Regression - Say - Day 1 - Add credit cards and bank accts.xlsx")
InvokeWebRequest($dataFile)
Write-Output "`n Finished Regression - Say - Day 1 - Add credit cards and bank accts.xlsx"
Start-Sleep -Seconds 2

# Regression - Say - Day 1 - PC CAN.xlsx
write-output "`n Regression - Say - Day 1 - PC CAN.xlsx"
$dataFile = Import-Excel ("D:\RegressionTests_New\Test Data - R12 - UNIT - Say Regression - 2019 08 02-template-for-autogenerated-data\Regression - Say - Day 1 - PC CAN.xlsx")
InvokeWebRequest($dataFile)
Write-Output "`n Finished Regression - Say - Day 1 - PC CAN.xlsx"
Start-Sleep -Seconds 2

# Age this until Day 3
executeAging(Get-Date $startDate.AddDays(3) -Format 'yyyy-MM-dd')
write-output "`n Regression - Say - Day 3 - step 1 - CAN REIN.xlsx"
$dataFile = Import-Excel ("D:\RegressionTests_New\Test Data - R12 - UNIT - Say Regression - 2019 08 02-template-for-autogenerated-data\Regression - Say - Day 3 - step 1 - CAN REIN.xlsx")
InvokeWebRequest($dataFile)
Write-Output "`n Finished - Say - Day 3 - step 1"

# No aging here - Day 3 - Step 2
write-output "`n Regression - Say - Day 3 - step 2 - Pay After.xlsx"
$dataFile = Import-Excel ("D:\RegressionTests_New\Test Data - R12 - UNIT - Say Regression - 2019 08 02-template-for-autogenerated-data\Regression - Say - Day 3 - step 2 - Pay After.xlsx")
InvokeWebRequest($dataFile)
Write-Output "`n Finished - Say - Day 3 - step 2"

# Age this until Day 6
executeAging(Get-Date $startDate.AddDays(6) -Format 'yyyy-MM-dd')
write-output "`n Regression - Say - Day 6 - PC.xlsx"
$dataFile = Import-Excel ("D:\RegressionTests_New\Test Data - R12 - UNIT - Say Regression - 2019 08 02-template-for-autogenerated-data\Regression - Say - Day 6 - PC.xlsx")
InvokeWebRequest($dataFile)
Write-Output "`n Finished Day 6"

# Age this until Day 8
executeAging(Get-Date $startDate.AddDays(8) -Format 'yyyy-MM-dd')
write-output "`n Regression - Say - Day 8 - PC CAN REIN.xlsx"
$dataFile = Import-Excel ("D:\RegressionTests_New\Test Data - R12 - UNIT - Say Regression - 2019 08 02-template-for-autogenerated-data\Regression - Say - Day 8 - PC CAN REIN.xlsx")
InvokeWebRequest($dataFile)
Write-Output "`n Finished Day 8"